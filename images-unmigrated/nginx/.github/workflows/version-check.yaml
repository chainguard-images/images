on:
  push:
    branches:
      - main

    # If README.md is generated by this job, do not re-run
    paths-ignore:
      - README.md

  schedule:
    - cron: '0 2 * * *' # Two hours after scheduled release job
  workflow_dispatch: {}

name: Check for new versions of nginx
concurrency: version-check

env:
  # Unique ID of nginx on release-monitoring.org
  # See https://release-monitoring.org/project/5413/
  project-id: 5413

  # The list of versions that we explicitly ignore / do not build
  ignored-versions: '1.23.1,1.23.0,1.22.0,1.21.6,1.21.5,1.21.4,1.21.3,1.21.2,1.21.1,1.21.0,1.20.2,1.20.1,1.20.0,1.19.10,1.19.9,1.19.8,1.19.7,1.19.6,1.19.5,1.19.4,1.19.3,1.19.2,1.19.1,1.19.0,1.18.0,1.17.10,1.17.9,1.17.8,1.17.7,1.17.6,1.17.5,1.17.4,1.17.3,1.17.2,1.17.1,1.17.0,1.16.1,1.16.0,1.15.12,1.15.11,1.15.10,1.15.9,1.15.8,1.15.7,1.15.6,1.15.5,1.15.2,1.15.1,1.15.0,1.14.2,1.14.0,1.13.12,1.13.11,1.13.10,1.13.9,1.13.8,1.13.7,1.13.6,1.13.5,1.13.4,1.13.3,1.13.2,1.13.1,1.13.0,1.12.2,1.12.0,1.11.13,1.11.12,1.11.11,1.11.10,1.11.9,1.11.8,1.11.7,1.11.6,1.11.5,1.11.4,1.11.3,1.11.2,1.11.1,1.11.0,1.10.3,1.10.0,1.9.15,1.9.14,1.9.13,1.9.12,1.9.11,1.9.10,1.9.9,1.9.8,1.9.7,1.9.6,1.9.5,1.9.4,1.9.3,1.9.2,1.9.1,1.9.0,1.8.1,1.8.0,1.7.12,1.7.11,1.6.3,1.4.7,1.2.9,1.1.7,1.1.6,1.0.15,0.8.55,0.7.69,0.6.39,0.5.38'

jobs:
  check:
    name: Check versions
    runs-on: ubuntu-latest
    steps:
      - name: Install crane
        uses: imjasonh/setup-crane@v0.2

      - name: Get list of versions from release-monitoring.org
        uses: chainguard-images/actions/release-monitoring@main
        id: release-monitoring
        with:
          project-id: ${{ env.project-id }}

      - name: Compare our released (and ignored) versions to the list
        id: compare
        run: |
          published_versions="$(crane ls ghcr.io/${{ github.repository }} | grep '^[0-9]*\.[0-9]*\.' | xargs | sed 's/ /,/g')"
          all_versions="${{ steps.release-monitoring.outputs.all-versions }}"
          ignored_versions="${{ env.ignored-versions }}"
          untracked=()
          for v in ${all_versions//,/ }; do found=0; 
            for vv in ${published_versions//,/ }; do
              if [[ "${vv}" == "${v}" ]]; then found=1; break; fi
            done
            if [[ "${found}" = "0" ]]; then for vv in ${ignored_versions//,/ }; do
              if [[ "${vv}" == "${v}" ]]; then found=1; break; fi
            done; fi
            if [[ "${found}" = "0" ]]; then untracked+=("${v}"); fi
          done
          IFS=,
          untracked_versions="${untracked[*]}"
          exit_code="0"
          [[ "${untracked_versions}" == "" ]] || exit_code="1"
          set -x
          echo "untracked-versions=${untracked_versions}" >> $GITHUB_OUTPUT
          echo "exit-code=${exit_code}" >> $GITHUB_OUTPUT

      - name: Post any untracked versions to Slack
        if: ${{ steps.compare.outputs.untracked-versions != '' }}
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_ICON: http://github.com/chainguardian.png?size=48
          SLACK_USERNAME: chainguardian
          SLACK_WEBHOOK: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          SLACK_CHANNEL: chainguard-images-alerts
          SLACK_COLOR: '#8E1600'
          MSG_MINIMAL: 'true'
          SLACK_TITLE: New untracked versions detected
          SLACK_MESSAGE: |
            Untracked versions: ${{ steps.compare.outputs.untracked-versions }}
            The repo must be updated to either ignore or support these versions.
            For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Pass or fail based on whether any untracked versions found
        run: |
          exit ${{ steps.compare.outputs.exit-code }}
