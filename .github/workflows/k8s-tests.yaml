on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      only:
        description: 'Specific image name to build'
        type: string
        required: false
        default: ''
concurrency: k8s-tests
env:
  EXTRA_INPUT_APKO_IMAGE: ghcr.io/wolfi-dev/apko:latest@sha256:985e59098f9a6bd69d19e5d751ed7d23512b01d80a05be845b02722a0f47778d
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      shard-0: ${{ steps.generate-matrix-0.outputs.matrix }}
      shard-1: ${{ steps.generate-matrix-1.outputs.matrix }}
    steps:
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.4.0
    - id: build-filter
      run: |
        set -xe
        TMP=$(mktemp)
        [[ "${{ inputs.only }}" == "" ]] || echo -n 'images/${{ inputs.only }}/image.yaml' > "${TMP}"
        echo "filter=$(cat "${TMP}")" >> $GITHUB_OUTPUT
    - id: generate-matrix-0
      uses: ./.github/actions/generate-matrix
      with:
        shard: 0
        sharding-factor: 2
        test-tags: k8s
        modified-files: ${{ steps.build-filter.outputs.filter }}
    - id: generate-matrix-1
      uses: ./.github/actions/generate-matrix
      with:
        shard: 1
        sharding-factor: 2
        test-tags: k8s
        modified-files: ${{ steps.build-filter.outputs.filter }}

  run-tests-0:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.shard-0) }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.4.0
      - uses: chainguard-dev/actions/setup-kind@main
        with:
          k8s-version: v1.24.x
          registry-authority: registry.local:5000
      - run: |
          kubectl get pods --all-namespaces
      - name: Get registry IP address (for use inside docker)
        id: registry-ip
        run: |
          echo "ip=$(docker inspect registry.local | jq -r '.[0].NetworkSettings.Networks["bridge"].IPAddress')" >> $GITHUB_OUTPUT
      - uses: chainguard-images/actions/apko-publish@main
        with:
          apko-image: ${{ env.EXTRA_INPUT_APKO_IMAGE }}
          config: ${{ matrix.apkoConfig }}
          tag: ${{ steps.registry-ip.outputs.ip }}:5000/${{ matrix.imageName }}:${{ matrix.apkoTargetTag }}
      - name: Run k8s tests
        run: |
          set -x
          export IMAGE_REGISTRY="registry.local:5000"
          export IMAGE_REPOSITORY="${{ matrix.imageName }}"
          export IMAGE_TAG="${{ matrix.apkoTargetTag }}"
          export IMAGE_NAME="${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
          export IMAGE_TAG_SUFFIX="${{ matrix.apkoTargetTagSuffix }}"

          # Set keys required for integration tests
          export NEW_RELIC_LICENSE_KEY="${{ secrets.NEW_RELIC_LICENSE_KEY }}"

          cd "${{ matrix.testCommandDir }}"
          ${{ matrix.testCommandExe }}

  run-tests-1:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.shard-1) }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.4.0
      - uses: chainguard-dev/actions/setup-kind@main
        with:
          k8s-version: v1.24.x
          registry-authority: registry.local:5000
      - run: |
          kubectl get pods --all-namespaces
      - name: Get registry IP address (for use inside docker)
        id: registry-ip
        run: |
          echo "ip=$(docker inspect registry.local | jq -r '.[0].NetworkSettings.Networks["bridge"].IPAddress')" >> $GITHUB_OUTPUT
      - uses: chainguard-images/actions/apko-publish@main
        with:
          apko-image: ${{ env.EXTRA_INPUT_APKO_IMAGE }}
          config: ${{ matrix.apkoConfig }}
          tag: ${{ steps.registry-ip.outputs.ip }}:5000/${{ matrix.imageName }}:${{ matrix.apkoTargetTag }}
      - name: Run k8s tests
        run: |
          set -x
          export IMAGE_REGISTRY="registry.local:5000"
          export IMAGE_REPOSITORY="${{ matrix.imageName }}"
          export IMAGE_TAG="${{ matrix.apkoTargetTag }}"
          export IMAGE_NAME="${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
          export IMAGE_TAG_SUFFIX="${{ matrix.apkoTargetTagSuffix }}"

          # Set keys required for integration tests
          export NEW_RELIC_LICENSE_KEY="${{ secrets.NEW_RELIC_LICENSE_KEY }}"

          cd "${{ matrix.testCommandDir }}"
          ${{ matrix.testCommandExe }}
