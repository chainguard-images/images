name: image-summary
inputs:
  gcsBucketName:
    default: ''
runs:
  using: composite
  steps:
    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0

    # If publishing to Chainguard registry (cgr.dev), setup auth
    - id: cgrauth1
      if: contains(inputs.apkoBaseTag, 'cgr.dev/') && inputs.chainguardIdentity != ''
      uses: chainguard-dev/actions/setup-chainctl@main
      with:
        identity: ${{ inputs.chainguardIdentity }}

    # If an image tier is present, set it using chainctl
    - id: set-tier
      name: Set the image tier
      if: contains(inputs.apkoBaseTag, 'cgr.dev/') && inputs.chainguardIdentity != '' && inputs.tier != ''
      shell: bash
      run: |
        set -x
        name="$(basename ${{ inputs.apkoBaseTag }})"
        group="$(dirname ${{ inputs.chainguardIdentity }})"
        tier="${{ inputs.tier }}"
        chainctl images repos update "${name}" --group="${group}" --tier="${tier}"

    # GCloud-based, setup OIDC->SA auth
    - id: gcrauth1
      if: contains(inputs.apkoBaseTag, 'gcr.io/') || contains(inputs.apkoBaseTag, 'pkg.dev/')
      uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # v1.0.0
      with:
        workload_identity_provider: ${{ inputs.gcrAuthWorkloadIdentityProvider }}
        service_account: ${{ inputs.gcrAuthServiceAccount }}
    - id: gcrauth2
      if: contains(inputs.apkoBaseTag, 'gcr.io/') || contains(inputs.apkoBaseTag, 'pkg.dev/')
      uses: google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce # v1.0.1
      with:
        project_id: ${{ inputs.gcrAuthProjectId }}
        install_components: beta
    - id: gcrauth3
      if: contains(inputs.apkoBaseTag, 'gcr.io/') || contains(inputs.apkoBaseTag, 'pkg.dev/')
      shell: bash
      run: |
        gcloud auth configure-docker "$(echo ${{ inputs.apkoBaseTag }} | cut -d / -f 1)"

    - name: Setup crane
      id: setup-crane
      uses: imjasonh/setup-crane@v0.3

    - name: Setup cosign
      uses: sigstore/cosign-installer@v3

    - id: create-image-summary
      shell: bash
      run: |
        echo '${{ inputs.imageSummaryJson }}' > summary.json

        # Use the SBOM to get the package version, add to dynamic.resolved list
        ref="$(cat summary.json | jq -r .ref)"
        i=0
        for line in $(cat summary.json | jq -c .tags[]); do
          pkg="$(echo "${line}" | jq -r .dynamic.package)"
          if [[ "${pkg}" != "" ]]; then
            primary="$(echo "${line}" | jq -r .primary)"
            set -x # Try to debug any cosign failures here

            # Support single-arch images (for now)
            digest="$(crane digest --platform=linux/amd64 "${ref}:${primary}" || crane digest "${ref}:${primary}")"
            cosign download attestation \
              --predicate-type https://spdx.dev/Document \
              "${ref}@${digest}" | jq -r .payload | base64 -d | jq -M -c .predicate > sbom.json

            version="$(cat sbom.json | jq -r '.packages[] | select(.name == "'${pkg}'") | .versionInfo' | uniq)"
            rm -f sbom.json
            set +x
            if [[ "${version}" != "" ]]; then
              all_dynamic_versions=""
              prefix="$(echo "${line}" | jq -r .dynamic.prefix)"
              suffix="$(echo "${line}" | jq -r .dynamic.suffix)"
              version_no_epoch="$(echo "${version}" | cut -d- -f1)"
              tmp=""
              for v in ${version_no_epoch//./ }; do
                if [[ "${tmp}" == "" ]]; then
                  tmp="${v}"
                else
                  tmp="${tmp}.${v}"
                fi
                t="${prefix}${tmp}${suffix}"
                skip=0
                for exclude in $(echo "${line}" | jq -r .dynamic.exclude[]); do
                  if [[ "${t}" == "${exclude}" ]]; then
                    skip=1
                    break
                  fi
                done
                if [[ "${skip}" == "0" ]]; then
                  if [[ "${all_dynamic_versions}" == "" ]]; then
                    all_dynamic_versions="${t}"
                  else
                    all_dynamic_versions="${all_dynamic_versions},${t}"
                  fi
                fi
              done
              t="${prefix}${version}${suffix}"
              skip=0
              for exclude in $(echo "${line}" | jq -r .dynamic.exclude[]); do
                if [[ "${t}" == "${exclude}" ]]; then
                  skip=1
                  break
                fi
              done
              if [[ "${skip}" == "0" ]]; then
                if [[ "${all_dynamic_versions}" == "" ]]; then
                  all_dynamic_versions="${t}"
                else
                  all_dynamic_versions="${all_dynamic_versions},${t}"
                fi
              fi
              if [[ "${all_dynamic_versions}" != "" ]]; then
                resolved="$(printf "${all_dynamic_versions}" | jq -R -c '.|split(",")')"
                cat summary.json | jq '.tags['${i}'].dynamic.resolved = '${resolved}'' > summary.json.tmp
                mv summary.json.tmp summary.json
              fi
            fi
          fi
          i=$((i+1))
        done

        # Minify
        cat summary.json | jq -c -M > summary.json.tmp
        mv summary.json.tmp summary.json

        echo "Image summary for ${{ inputs.imageName }}:"
        cat summary.json | jq

        rm -rf image-summary-output/
        mkdir image-summary-output/
        mv summary.json "image-summary-output/${{ inputs.imageName }}.json"

    # Auth to gcloud
    - id: gcsauth1
      if: inputs.gcsBucketName != ''
      uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # v1.0.0
      with:
        workload_identity_provider: ${{ inputs.gcsAuthWorkloadIdentityProvider }}
        service_account: ${{ inputs.gcsAuthServiceAccount }}
    - id: gcsauth2
      if: inputs.gcsBucketName != ''
      uses: google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce # v1.0.1
      with:
        project_id: ${{ inputs.gcsAuthProjectId }}
        install_components: beta

    # Upload to GCS (and don't cache)
    - id: gcsupload1
      if: inputs.gcsBucketName != ''
      shell: bash
      run: |
        gcloud --quiet storage cp \
            --cache-control=no-store \
            image-summary-output/* gs://${{ inputs.gcsBucketName }}/summary

    - uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # v3.1.1
      if: always()
      with:
        name: image-summary
        path: image-summary-output

    # Slack notification if build failing
    - uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844 # v1.23.0
      #if: failure() && inputs.slackWebhookUrl != ''
      if: failure() && inputs.slackWebhookUrl == 'TODO disabled'
      id: slack
      with:
        payload: '{"text": "[image-summary] ${{ inputs.imageName }} failed: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookUrl }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Touch actions file to prevent postrun failure
      if: always()
      shell: bash
      run: |
        set -x && [[ -f .github/actions/image-summary/action.yml ]] || ( \
          mkdir -p .github/actions/image-summary/ && echo 'runs: {using: composite, steps: []}' > .github/actions/image-summary/action.yml )
