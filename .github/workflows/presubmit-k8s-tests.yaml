on:
  pull_request:
    branches:
      - main
    types:
      - labeled
env:
  EXTRA_INPUT_APKO_IMAGE: ghcr.io/wolfi-dev/apko:latest@sha256:985e59098f9a6bd69d19e5d751ed7d23512b01d80a05be845b02722a0f47778d
jobs:
  presubmit-matrix-k8s:
    if: contains(github.event.pull_request.labels.*.name, 'k8s')
    runs-on: ubuntu-latest
    outputs:
      shard-0: ${{ steps.generate-matrix-0.outputs.matrix }}
      shard-1: ${{ steps.generate-matrix-1.outputs.matrix }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - id: files
        uses: tj-actions/changed-files@b13786805affca18e536ed489687d3d8d1f05d21 # v36.0.17
        with:
          separator: ','
      - id: generate-matrix-0
        uses: ./.github/actions/generate-matrix
        with:
          shard: 0
          sharding-factor: 2
          modified-files: ${{ steps.files.outputs.all_changed_files }}
          melange-mode: none
          test-tags: k8s
      - id: generate-matrix-1
        uses: ./.github/actions/generate-matrix
        with:
          shard: 1
          sharding-factor: 2
          modified-files: ${{ steps.files.outputs.all_changed_files }}
          melange-mode: none
          test-tags: k8s

  presubmit-build-k8s-0:
    if: contains(github.event.pull_request.labels.*.name, 'k8s')
    runs-on: ubuntu-latest
    needs:
      - presubmit-matrix-k8s
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.presubmit-matrix-k8s.outputs.shard-0) }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.4.0
      - uses: chainguard-dev/actions/setup-kind@main
        with:
          k8s-version: v1.24.x
          registry-authority: registry.local:5000
      - run: |
          kubectl get pods --all-namespaces
      - name: Get registry IP address (for use inside docker)
        id: registry-ip
        run: |
          echo "ip=$(docker inspect registry.local | jq -r '.[0].NetworkSettings.Networks["bridge"].IPAddress')" >> $GITHUB_OUTPUT
      - uses: chainguard-images/actions/apko-publish@main
        with:
          apko-image: ${{ env.EXTRA_INPUT_APKO_IMAGE }}
          config: ${{ matrix.apkoConfig }}
          tag: ${{ steps.registry-ip.outputs.ip }}:5000/${{ matrix.imageName }}:${{ matrix.apkoTargetTag }}
      - name: Run k8s tests
        run: |
          set -x
          export IMAGE_REGISTRY="registry.local:5000"
          export IMAGE_REPOSITORY="${{ matrix.imageName }}"
          export IMAGE_TAG="${{ matrix.apkoTargetTag }}"
          export IMAGE_NAME="${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
          export IMAGE_TAG_SUFFIX="${{ matrix.apkoTargetTagSuffix }}"

          # Set keys required for integration tests
          export NEW_RELIC_LICENSE_KEY="${{ secrets.NEW_RELIC_LICENSE_KEY }}"

          cd "${{ matrix.testCommandDir }}"
          ${{ matrix.testCommandExe }}

  presubmit-build-k8s-1:
    if: contains(github.event.pull_request.labels.*.name, 'k8s')
    runs-on: ubuntu-latest
    needs:
      - presubmit-matrix-k8s
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.presubmit-matrix-k8s.outputs.shard-1) }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.4.0
      - uses: chainguard-dev/actions/setup-kind@main
        with:
          k8s-version: v1.24.x
          registry-authority: registry.local:5000
      - run: |
          kubectl get pods --all-namespaces
      - name: Get registry IP address (for use inside docker)
        id: registry-ip
        run: |
          echo "ip=$(docker inspect registry.local | jq -r '.[0].NetworkSettings.Networks["bridge"].IPAddress')" >> $GITHUB_OUTPUT
      - uses: chainguard-images/actions/apko-publish@main
        with:
          apko-image: ${{ env.EXTRA_INPUT_APKO_IMAGE }}
          config: ${{ matrix.apkoConfig }}
          tag: ${{ steps.registry-ip.outputs.ip }}:5000/${{ matrix.imageName }}:${{ matrix.apkoTargetTag }}
      - name: Run k8s tests
        run: |
          set -x
          export IMAGE_REGISTRY="registry.local:5000"
          export IMAGE_REPOSITORY="${{ matrix.imageName }}"
          export IMAGE_TAG="${{ matrix.apkoTargetTag }}"
          export IMAGE_NAME="${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
          export IMAGE_TAG_SUFFIX="${{ matrix.apkoTargetTagSuffix }}"

          # Set keys required for integration tests
          export NEW_RELIC_LICENSE_KEY="${{ secrets.NEW_RELIC_LICENSE_KEY }}"

          cd "${{ matrix.testCommandDir }}"
          ${{ matrix.testCommandExe }}

  presubmit-roundup:
    needs:
      - presubmit-build-k8s-0
      - presubmit-build-k8s-1
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@45ce8e0eb155657ab8ccf346ade734257fd196a5 # v3.0.3

      - if: ${{ env.WORKFLOW_CONCLUSION == 'success' }}
        working-directory: /tmp
        run: echo ${{ env.WORKFLOW_CONCLUSION }} && exit 0

      - if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
        working-directory: /tmp
        run: echo ${{ env.WORKFLOW_CONCLUSION }} && exit 1
