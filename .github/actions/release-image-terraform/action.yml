name: release-image-terraform
description: "Like build-image-terraform but release instead"
inputs:
  chainguardIdentity:
    description: "Used with setup-chainctl"
  imageName:
    description: "Name of the terraform module"
  targetRepository:
    default: cgr.dev/chainguard
    description: "Base registry+repository to push images"
  apkoImage:
    default: ghcr.io/wolfi-dev/apko:latest
    description: "Image to use for apko"
runs:
  using: composite
  steps:
    - if: inputs.overrideCheckoutRef == '' && inputs.overrideCheckoutRepository == ''
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
    - if: inputs.overrideCheckoutRef != '' || inputs.overrideCheckoutRepository != ''
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
      with:
        clean: false
        ref: ${{ inputs.overrideCheckoutRef }}
        repository: ${{ inputs.overrideCheckoutRepository }}

    - uses: chainguard-dev/actions/setup-chainctl@main
      with:
        identity: ${{ inputs.chainguardIdentity }}

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.3.*'
        terraform_wrapper: false

    # Make cosign/crane CLI available to the tests
    - uses: sigstore/cosign-installer@v3.1.0
    - uses: imjasonh/setup-crane@v0.3

    - name: Terraform apply
      id: terraform-apply
      shell: bash
      env:
        APKO_IMAGE: ${{inputs.apkoImage}}
        TF_VAR_target_repository: ${{inputs.targetRepository}}

      run: |
        set -x -o pipefail
        env | grep '^TF_VAR_'

        echo ::group::terraform init
        terraform init
        echo ::endgroup::
        terraform apply -auto-approve "-target=module.${{ inputs.imageName }}" -json | tee /tmp/${{ inputs.imageName }}.tf.json | jq -r '.["@message"]'

    - name: Surface terraform warnings.
      if: always()
      shell: bash
      run: grep '"@level":"warn"' /tmp/${{ inputs.imageName }}.tf.json | jq || true

    - name: Surface terraform errors
      if: failure()
      shell: bash
      run: grep '"@level":"error"' /tmp/${{ inputs.imageName }}.tf.json | jq  || true

    - name: Upload terraform logs
      if: always()
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3
      with:
        name: ${{ inputs.imageName }}.tf.json
        path: /tmp/${{ inputs.imageName }}.tf.json

    - name: Touch actions file to prevent postrun failure
      if: always()
      shell: bash
      run: |
        set -x && [[ -f .github/actions/release-image/action.yml ]] || ( \
          mkdir -p .github/actions/release-image/ && echo 'runs: {using: composite, steps: []}' > .github/actions/release-image/action.yml )
