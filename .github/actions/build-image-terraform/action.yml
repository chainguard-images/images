name: build-image-terraform
runs:
  using: composite
  steps:
    - if: inputs.overrideCheckoutRef == '' && inputs.overrideCheckoutRepository == ''
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
    - if: inputs.overrideCheckoutRef != '' || inputs.overrideCheckoutRepository != ''
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
      with:
        clean: false
        ref: ${{ inputs.overrideCheckoutRef }}
        repository: ${{ inputs.overrideCheckoutRepository }}

    # optionally fetch a gcs bucket to be used by melange and apko builds
    - id: gcsfetchauth1
      if: inputs.gcsFetchBucketName != ''
      uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # v1.0.0
      with:
        workload_identity_provider: ${{ inputs.gcsFetchAuthWorkloadIdentityProvider }}
        service_account: ${{ inputs.gcsFetchAuthServiceAccount }}
    - id: gcsfetchauth2
      if: inputs.gcsFetchBucketName != ''
      uses: google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce # v1.0.1
      with:
        project_id: ${{ inputs.gcsFetchAuthProjectId }}
    - id: gcsfetchauth3
      if: inputs.gcsFetchBucketName != ''
      shell: bash
      name: 'Check that GCloud is properly configured'
      run: |
        gcloud info
        gcloud --quiet alpha storage ls
    - id: rsync
      shell: bash
      if: inputs.gcsFetchBucketName != ''
      run: |
        mkdir -p "${{ github.workspace }}/packages"
        gsutil -m rsync -r "${{ inputs.gcsFetchBucketName }}" "${{ github.workspace }}/packages/"
        find "${{ github.workspace }}/packages" -print -exec touch \{} \;
        ls -al "${{ github.workspace }}/packages/"

    - uses: chainguard-dev/actions/setup-registry@main
      with:
        port: 5000

    - name: Setup Terrafrom
      id: setup-terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.3.*'
        terraform_wrapper: false

    - shell: bash
      run: |
        # Turn comma-delimited list into JSON-style list.
        export TF_VAR_extra_repositories="$(echo "${{ inputs.apkoRepositoryAppend }}" | tr -d '[:space:]' | jq --raw-input -c --slurp 'split(",")')"
        export TF_VAR_extra_keyring="$(echo "${{ inputs.apkoKeyringAppend }}" | tr -d '[:space:]' | jq --raw-input -c --slurp 'split(",")')"
        export TF_VAR_extra_packages="$(echo "${{ inputs.apkoPackageAppend }}" | tr -d '[:space:]' | jq --raw-input -c --slurp 'split(",")')"

        # Expose as TF_VAR to the next step.
        echo "TF_VAR_extra_repositories=${TF_VAR_extra_repositories}" >> $GITHUB_ENV
        echo "TF_VAR_extra_keyring=${TF_VAR_extra_keyring}" >> $GITHUB_ENV
        echo "TF_VAR_extra_packages=${TF_VAR_extra_packages}" >> $GITHUB_ENV

    - name: Terraform apply (apko publish)
      id: terraform-apply
      shell: bash
      working-directory: ${{ inputs.terraformDirectory }}
      env:
        TF_VAR_target_repository: localhost:5000/testing
        TF_VAR_target_tag: ${{ inputs.apkoTargetTag }}
        TF_VAR_tag_suffix: ${{ inputs.apkoTargetTagSuffix }}
      run: |
        set -x
        env | grep '^TF_VAR_'
        terraform init
        terraform apply -auto-approve

    - name: Touch actions file to prevent postrun failure
      if: always()
      shell: bash
      run: |
        set -x && [[ -f .github/actions/build-image/action.yml ]] || ( \
          mkdir -p .github/actions/build-image/ && echo 'runs: {using: composite, steps: []}' > .github/actions/build-image/action.yml )