name: policy-check-image
inputs:
  slackWebhookUrl:
    default: ''
runs:
  using: composite
  steps:
    - shell: bash
      run: echo "skip policy check while testing upgrade to latest version"
  # steps:
  #   - name: Build and image with policy-tester and crane
  #     shell: bash
  #     run: |
  #       trap "rm -rf custom-image.tar custom-image.apko.yaml" EXIT
  #
  #       cat >./custom-image.apko.yaml <<EOL
  #       contents:
  #         packages:
  #           - ca-certificates-bundle
  #           - crane
  #           - policy-controller-tester
  #       EOL
  #       docker run --rm -v "${PWD}:/work" \
  #         ghcr.io/wolfi-dev/apko:latest \
  #         build --debug \
  #         --arch=amd64 --sbom=false \
  #         --repository-append=https://packages.wolfi.dev/os \
  #         --keyring-append=https://packages.wolfi.dev/os/wolfi-signing.rsa.pub \
  #         /work/custom-image.apko.yaml \
  #         custom-image:latest \
  #         custom-image.tar
  #
  #       IMAGE_NAME=$(docker load < custom-image.tar | grep "Loaded image" | sed 's/^Loaded image: //')
  #
  #       cat >/tmp/custom-image <<EOL
  #       #!/usr/bin/env bash
  #       set -e
  #       docker run --rm \
  #         -v "${PWD}:/work" -w /work --entrypoint "\$(basename "\$0")" \
  #         "${IMAGE_NAME}" \$@
  #       EOL
  #
  #       chmod +x /tmp/custom-image
  #       cp /tmp/custom-image /tmp/policy-tester
  #       cp /tmp/custom-image /tmp/crane
  #
  #   - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
  #   - name: Determine image ref
  #     shell: bash
  #     run: |
  #       set -x
  #
  #       BASE_TAG="$(echo "${{ inputs.apkoBaseTag }}" | sed 's|ghcr\.io/chainguard-images/|cgr\.dev/chainguard/|')"
  #       REF="${BASE_TAG}:${{ inputs.apkoTargetTag }}"
  #
  #       # First check the policy against the image index
  #       for policy in `find policies -name *.yaml`; do
  #         echo "Checking image index against ${policy} ..."
  #         /tmp/policy-tester \
  #           --policy "${policy}" \
  #           --image "${REF}"
  #       done
  #
  #       # Next check the policy against each architecture image manifest
  #       for combo in `/tmp/crane manifest ${REF} | jq -r '.manifests[] | .platform.architecture + .platform.variant + "_" + .digest'`; do
  #         arch="$(echo "${combo}" | cut -d "_" -f1)"
  #         digest="$(echo "${combo}" | cut -d "_" -f2)"
  #         arch_ref="${BASE_TAG}@${digest}"
  #         for policy in `find policies -name *.yaml`; do
  #           echo "Checking image manifest (${arch}) against ${policy} ..."
  #           /tmp/policy-tester \
  #             --policy "${policy}" \
  #             --image "${arch_ref}"
  #         done
  #       done
  #
  #   # There is currently no way to obtain the job ID for a single matrix leg, so we have to
  #   # try to hit the GitHub API and match the job based on the name, then extract the html_url
  #   # See the following issue for more details: https://github.com/orgs/community/discussions/40291
  #   - shell: bash
  #     if: failure() && inputs.slackWebhookUrl != ''
  #     id: slacklink
  #     run: |
  #       set -x
  #       function get_actions_job_url {
  #         curl -vL -H "Authorization: Bearer ${{ github.token }}" \
  #           "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs?per_page=100" \
  #           | jq -r ".jobs[] | select(.name | contains(\"${1}\")) | .html_url"
  #       }
  #       if [[ "${{ inputs.melangeConfig }}" != "" ]]; then
  #         export ACTIONS_URL="$(get_actions_job_url ${{ inputs.melangeConfig }})"
  #       else
  #         export ACTIONS_URL="$(get_actions_job_url ${{ inputs.apkoConfig }})"
  #       fi
  #       export ACTIONS_URL="${ACTIONS_URL:-https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}}"
  #       echo "link=${ACTIONS_URL}" >> $GITHUB_OUTPUT
  #
  #   # Slack notification if build failing
  #   - uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844 # v1.23.0
  #     if: failure() && inputs.slackWebhookUrl != ''
  #     id: slack
  #     with:
  #       payload: '{"text": "[policy-check] ${{ inputs.imageName }} ${{ inputs.apkoTargetTag }} failed: ${{ steps.slacklink.outputs.link }}"}'
  #     env:
  #       SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookUrl }}
  #       SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  #
  #   - name: Touch actions file to prevent postrun failure
  #     if: always()
  #     shell: bash
  #     run: |
  #       set -x && [[ -f .github/actions/policy-check-image/action.yml ]] || ( \
  #         mkdir -p .github/actions/policy-check-image/ && echo 'runs: {using: composite, steps: []}' > .github/actions/policy-check-image/action.yml )
