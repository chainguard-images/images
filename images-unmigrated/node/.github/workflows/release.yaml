on:
  push:
    branches:
      - main

    # If README.md is generated by this job, do not re-run
    paths-ignore:
      - README.md

  schedule:
    - cron: '0 0 * * *'

  # Allow manually triggered workflows by maintainers without any
  # parameters to trigger a proactive rebuild (e.g. when a new
  # apko lands)
  workflow_dispatch: {}

name: Create Release

# Don't run multiple releases concurrently.
concurrency: release

jobs:
  build:
    name: Release OCI image
    runs-on: ubuntu-latest

    outputs:
      image-refs: ${{ steps.emit-refs.outputs.image-refs }}

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write
      packages: write
      contents: read

    steps:
    - uses: actions/checkout@v3

    - id: apko
      uses: chainguard-images/actions/apko-snapshot@main
      with:
        config: apko.yaml
        image_refs: apko.images
        base-tag: ghcr.io/${{ github.repository }}

    - name: Emit Image Refs output
      id: emit-refs
      run: |
        cat apko.images | sed 's/$/\n/g' | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]' | jq .
        echo "image-refs=$(cat apko.images | sed 's/$/\n/g' | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

    # Post to slack when things fail.
    - if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_ICON: http://github.com/chainguardian.png?size=48
        SLACK_USERNAME: chainguardian
        SLACK_WEBHOOK: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
        SLACK_CHANNEL: chainguard-images-alerts
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Releasing ${{ github.repository }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  scan:
    name: Scan apko images
    needs: build
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write
      packages: write
      contents: read

    strategy:
      matrix:
        ref: ${{ fromJson(needs.build.outputs.image-refs) }}
    steps:
    - run: |
        echo ${{ matrix.ref }}

    - uses: chainguard-images/actions/vul-scans@main
      id: scans
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
        image: ${{ matrix.ref }}
        RUN_SNYK: "false"
        RUN_GRYPE: "false"
        DOCKER_LOGIN: 'true'

    - name: Image Vulnerability scan output
      shell: bash
      env:
        SNYK_COUNT: ${{ steps.scans.outputs.SNYK_COUNT }}
        GRYPE_COUNT: ${{ steps.scans.outputs.GRYPE_COUNT }}
        TRIVY_COUNT: ${{ steps.scans.outputs.TRIVY_COUNT }}
      run: |
        echo "Image Vulnerability scan output" >> $GITHUB_STEP_SUMMARY
        echo "Image ID: ${{ matrix.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Snyk Count: $SNYK_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "Grype Count: $GRYPE_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "Trivy Count: $TRIVY_COUNT" >> $GITHUB_STEP_SUMMARY

    - if: ${{ failure() || steps.scans.outputs.TRIVY_COUNT != '0' || steps.scans.outputs.GRYPE_COUNT != '0' || steps.scans.outputs.SNYK_COUNT != '0'  }}
      uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
      env:
        SLACK_ICON: http://github.com/chainguardian.png?size=48
        SLACK_USERNAME: chainguardian
        SLACK_WEBHOOK: ${{ secrets.VULNS_SLACK_WEBHOOK }}
        SLACK_CHANNEL: chainguard-images-alerts
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'false'
        SLACK_TITLE: Vulnerability Report for ${{ github.repository }}.
        SLACK_MESSAGE: |
          Snyk Count: ${{ steps.scans.outputs.SNYK_COUNT }}
          Grype Count: ${{ steps.scans.outputs.GRYPE_COUNT }}
          Trivy Count: ${{ steps.scans.outputs.TRIVY_COUNT }}
          Image ID: ${{ matrix.ref }}
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  generate-readme:
    name: Generate README
    needs: scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Enable OIDC
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Get repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - name: Generate README
        uses: chainguard-images/readme-generator@main
        with:
          repo: https://github.com/${{ github.repository }}
          name: ${{ env.REPO_NAME }}
          location: cgr.dev/chainguard/${{ env.REPO_NAME }}
          description: "WORK IN PROGRESS"
          push-to-repo: true

      # Post to slack when things fail.
      - if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_ICON: http://github.com/chainguardian.png?size=48
          SLACK_USERNAME: chainguardian
          SLACK_WEBHOOK: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          SLACK_CHANNEL: chainguard-images-alerts
          SLACK_COLOR: '#8E1600'
          MSG_MINIMAL: 'true'
          SLACK_TITLE: Generating new README for ${{ github.repository }} failed.
          SLACK_MESSAGE: |
            For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
