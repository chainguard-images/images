on:
  pull_request: # TODO: pull_request_target
    branches:
      - main

permissions:
  contents: read
  actions: read

env:
  TF_VAR_target_repository: registry.local:5000/testing
  TF_APKO_DISABLE_VERSION_TAGS: true # Disable version tags.
  TF_COSIGN_DISABLE: true # Don't sign in presubmit.

concurrency:
  group: presubmit-build-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  shard:
    runs-on: ubuntu-latest
    steps:
    - uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
      with:
        egress-policy: audit

    - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - name: Ensure no diff on tfgen
      run: |
        set -x
        make tfgen
        if ! git diff-index --quiet HEAD --; then
          echo "Error: Please re-run \"make tfgen\" and commit the result."
          exit 1
        fi

    - run: make init-upgrade # Initialize modules.
    - run: terraform fmt -check -recursive -diff
    - name: Enforce YAML formatting
      uses: docker://ghcr.io/wolfi-dev/sdk:latest@sha256:634eedd4e6cd139f4dcbebf46458db4e2558d0e01096cbabd6402e0a017d5ff3
      with:
        entrypoint: wolfictl
        args: lint yam images/

    - id: changed
      uses: tj-actions/changed-files@d6babd6899969df1a11d14c368283ea4436bca78 # v44.5.2
      with:
        dir_names: "true"
        # Truncates (not ignores) the path of changed files to 2 (ie: images/flux/tests/main.tf -> images/flux)
        dir_names_max_depth: "2"
        files_separator: "\n" # This is the default, but ensure we keep it such so the below discover steps work
        files_yaml: |
          base:
            - .github/actions/**
            - ./tflib/**
          images:
            - ./images/**
            - '!./images/**.md'

    - id: discover-base
      name: Discovered modified base files
      shell: bash # bash math foo required
      if: steps.changed.outputs.base_any_changed == 'true'
      run: |
        images=($(find ./images -maxdepth 1 -type d -not -path "./images/TEMPLATE" | awk -F'/' '{print $3}' | sort -u))

        n=50 # buckets to shard into
        total=${#images[@]}
        base_size=$((total / n))
        remainder=$((total % n))

        declare -a bins
        # Sequentially fill up each bin, and append any remainders to the last bin
        for ((i = 0; i < total; i++)); do
          idx=$((i < (total - remainder) ? i / base_size : n - 1))
          bins[$idx]+="${images[$i]} "
        done

        matrix=$(printf "%s\n" "${bins[@]}" | jq -cRnjr '[inputs] | [ range(0; length) as $i | { "index": $i | tostring, "images": .[$i] } ]')
        echo "matrix=${matrix}" >> $GITHUB_ENV

    - id: discover-images
      name: Discover modified images
      if: steps.changed.outputs.base_any_changed != 'true' && steps.changed.outputs.images_any_changed == 'true'
      run: |
        # Randomize and shard into bins of 5 images each
        n=5
        bins=$(echo "${{ steps.changed.outputs.images_all_changed_files }}" | sed 's/images\///g' | sed 's/ /\n/g' | sort -uR | tr '\n' ' ' | xargs -n $n | jq -cRnjr '[inputs] | [ range(0; length) as $i | { "index": $i | tostring, "images": .[$i] } ]')
        echo "matrix=${bins}" >> $GITHUB_ENV

    - id: set-matrix
      run: |
        out='${{ env.matrix }}'
        echo "shard_matrix=${out}" >> $GITHUB_OUTPUT

    - name: Shard Results
      run: echo '${{ steps.set-matrix.outputs.shard_matrix }}' | jq .

    outputs:
      # This is of the format [{"index": 0, "images": "a b c"}, {"index": 1, "images": "d e f"}, ...], or empty ([]) when nothing relevant has changed
      shard_matrix: ${{ steps.set-matrix.outputs.shard_matrix }}


  build-the-world:
    runs-on: ubuntu-latest
    needs: shard
    if: ${{ needs.shard.outputs.shard_matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        shard: ${{ fromJson(needs.shard.outputs.shard_matrix) }}

    steps:
    - uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
      with:
        egress-policy: audit

    - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    # In some cases, we run out of disk space during tests, so this hack frees up approx 25G.
    # See the following issue for more info: https://github.com/actions/runner-images/issues/2840#issuecomment-1284059930
    - name: Free up runner disk space
      uses: ublue-os/remove-unwanted-software@517622d6452028f266b7ba4cc9a123b5f58a6b53 # v7

    - uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # v3
      with:
        terraform_version: '1.8.*'
        terraform_wrapper: false
    # Make cosign/crane CLI available to the tests
    - uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
    - uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3

    - uses: chainguard-dev/actions/setup-k3d@ba1a9c9ffe799736883d58f31caff18d85b2800e # main
      with:
        k3s-image: cgr.dev/chainguard/k3s:latest@sha256:c34a5c9930d92e6aa815b213432fbc12bdc2e5f1edfb8edb1aa7b2dc919a7fe1

    - name: Configure imagetest provider
      run: |
        # Run a presubmit scoped global imagetest provider override that
        # configures the k3s harnesses for the presubmit scoped local registry.
        # This _could_ be in the `main.tf` with some conditionals, but since
        # this is striclty for presubmit we take this approach to keep things
        # simpler.
        cat >> main_override.tf <<EOF
        provider "imagetest" {
          log = {
            file = {
              directory = "imagetest-logs"
            }
          }
          harnesses = {
            k3s = {
              networks = {
                // wire in k3d's default network where the registry lives
                "k3d-default" = { name = "k3d-k3s-default" }
              }
              registries = {
                # Mirror the var.target_repository host registry to the local registry.
                # This ensures the images that are pushed from the host registry are
                # mirrored to the internal hostname:port registry.
                "registry.local:5000" = {
                  mirror = { endpoints = ["http://registry.local:5000"] }
                }
              }
            }
          }
        }
        EOF

    - name: Build
      timeout-minutes: 60
      run: |
        set -eo pipefail

        make init-upgrade
        targets=""
        for image in ${{ matrix.shard.images }}; do
          targets+=' -target='module."${image}"''
        done

        terraform plan ${targets} -out=plan.tfplan
        terraform apply ${targets} -auto-approve --parallelism=$(nproc) -json plan.tfplan | tee /tmp/mega-module.tf.json | jq -r '.["@message"]'

    - name: Collect TF diagnostics
      if: ${{ always() }}
      uses: chainguard-dev/actions/terraform-diag@ba1a9c9ffe799736883d58f31caff18d85b2800e # main
      with:
        json-file: /tmp/mega-module.tf.json

    - name: Upload terraform logs
      if: always()
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v3
      with:
        name: "mega-module-${{ matrix.shard.index }}.tf.json"
        path: /tmp/mega-module.tf.json

    - name: Collect diagnostics and upload
      if: ${{ failure() }}
      run: |
        echo 'This step is deprecated. Please use the imagetest provider and reference the imagetest logs'

    - name: Upload imagetest logs
      if: always()
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v3
      with:
        name: "mega-module-${{ matrix.shard.index }}-imagetest-logs"
        path: imagetest-logs

  presubmit-roundup:
    needs: build-the-world
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Fail if any previous job failed
        env:
          GH_TOKEN: ${{ github.token }}
        run: exit $(gh run view -R chainguard-images/images ${{github.run_id}} --json jobs | jq | tee /dev/stderr | jq -r '.jobs[0,-2].conclusion' | grep failure | wc -c)
