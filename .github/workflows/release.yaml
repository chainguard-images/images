on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      only:
        description: 'Specific image name to build'
        type: string
        required: false
        default: ''
concurrency: release
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      matrix-unique-images: ${{ steps.generate-matrix.outputs.matrix-unique-images }}
    steps:
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
    # For manual builds, build only the image requested
    - id: generate-matrix-manual
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.only != '' }}
      uses: ./.github/actions/generate-matrix
      with:
        modified-files: images/${{ inputs.only }}/image.yaml
    # For nightly builds, build every image (or on manual with no "only" input)
    - id: generate-matrix-schedule
      if: ${{ github.event_name == 'schedule' || ( github.event_name == 'workflow_dispatch' && inputs.only == '' ) }}
      uses: ./.github/actions/generate-matrix
    # On push to main branch, only build images necessary
    - id: files
      if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
      uses: tj-actions/changed-files@25eaddf37ae893cec889065e9a60439c8af6f089 # v36.0.3
      with:
        separator: ','
    - id: generate-matrix-main
      if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
      uses: ./.github/actions/generate-matrix
      with:
        modified-files: ${{ steps.files.outputs.all_changed_files }}
    - id: generate-matrix
      run: |
        set -x
        trap "rm -f matrix.json matrix-unique-images.json" EXIT
        echo '${{ steps.generate-matrix-manual.outputs.matrix }}' > matrix.json
        [[ "$(cat matrix.json)" != "" ]] || echo '${{ steps.generate-matrix-schedule.outputs.matrix }}' > matrix.json
        [[ "$(cat matrix.json)" != "" ]] || echo '${{ steps.generate-matrix-main.outputs.matrix }}' > matrix.json
        echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT
        echo '${{ steps.generate-matrix-manual.outputs.matrix-unique-images }}' > matrix-unique-images.json
        [[ "$(cat matrix-unique-images.json)" != "" ]] || echo '${{ steps.generate-matrix-schedule.outputs.matrix-unique-images }}' > matrix-unique-images.json
        [[ "$(cat matrix-unique-images.json)" != "" ]] || echo '${{ steps.generate-matrix-main.outputs.matrix-unique-images }}' > matrix-unique-images.json
        echo "matrix-unique-images=$(cat matrix-unique-images.json)" >> $GITHUB_OUTPUT

  # Originally found in apko-snapshot action
  generate-slsa-provenance:
    runs-on: ubuntu-latest
    outputs:
      slsa-provenance-cache-key: ${{ steps.generate-slsa-provenance.outputs.slsa-provenance-cache-key }}
    permissions:
      id-token: write
      packages: write
      contents: read
      actions: read
    steps:
      - name: Generate SLSA provenance
        id: generate-slsa-provenance
        env:
          COSIGN_EXPERIMENTAL: "true"
          GENERATOR_REPOSITORY: slsa-framework/slsa-github-generator
          GENERATOR_RELEASE_TAG: v1.5.0
          GENERATOR_RELEASE_BINARY: slsa-generator-container-linux-amd64
          GENERATOR_RELEASE_BINARY_SHA256: 6d8b83327ac2134aa8760e1e4f9cd5d3fdbcb56599e39be2cd965f1e04aa8ede
          GH_TOKEN: "${{ github.token }}"
          GITHUB_CONTEXT: "${{ toJSON(github) }}" # Needed by slsa-generator-container
        run: |
          set -x
          # Fetch the generator
          gh release -R "${GENERATOR_REPOSITORY}" download "${GENERATOR_RELEASE_TAG}" -p "${GENERATOR_RELEASE_BINARY}"
          COMPUTED_HASH="$(sha256sum "${GENERATOR_RELEASE_BINARY}" | awk '{print $1}')"
          if [[ "${COMPUTED_HASH}" != "${GENERATOR_RELEASE_BINARY_SHA256}" ]]; then
            echo "Mismatched checksums (wanted ${GENERATOR_RELEASE_BINARY_SHA256} got ${COMPUTED_HASH}). Exiting."
            exit 1
          fi
          chmod +x "${GENERATOR_RELEASE_BINARY}"

          # Create the provenance document
          echo "Generating SLSA build provenance ..."
          "./${GENERATOR_RELEASE_BINARY}" generate --predicate="provenance.json"
          echo "Provenance doc:"
          cat provenance.json | jq
          echo "slsa-provenance-cache-key=slsa-${{ github.run_id }}-$(date +%s)" >> $GITHUB_OUTPUT
      - id: cache-slsa-provenance-doc
        name: Cache the SLSA Provenance doc to be used in matrix legs
        uses: actions/cache/save@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: ./provenance.json
          key: "${{ steps.generate-slsa-provenance.outputs.slsa-provenance-cache-key }}"

  build:
    runs-on: ubuntu-latest
    needs: [generate-matrix, generate-slsa-provenance]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    permissions:
      id-token: write
      packages: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - id: release-image-inputs
        name: Add additional inputs for release-image action
        env:
          EXTRA_INPUT_SLACK_WEBHOOK_URL: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          EXTRA_INPUT_GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER }}
          EXTRA_INPUT_GCS_AUTH_SERVICE_ACCOUNT: ${{ secrets.GCS_AUTH_SERVICE_ACCOUNT }}
          EXTRA_INPUT_GCS_AUTH_PROJECT_ID: ${{ secrets.GCS_AUTH_PROJECT_ID }}
          EXTRA_INPUT_GCS_BUCKET_NAME: chainguard-images-build-outputs
          # This allows chainguard-images/images to publish images to cgr.dev/chainguard
          # We maintain this identity here:
          # https://github.com/chainguard-dev/mono/blob/main/env/chainguard-images/iac/images-pusher.tf
          EXTRA_INPUT_CHAINGUARD_IDENTITY: 720909c9f5279097d847ad02a2f24ba8f59de36a/b6461e99e132298f
          EXTRA_INPUT_APKO_IMAGE: ghcr.io/wolfi-dev/apko:latest@sha256:b4d68302d92493526c0eeef110adada719542daedc292fb063669602be9e4d2e
          EXTRA_INPUT_SLSA_PROVENANCE_CACHE_KEY: ${{ needs.generate-slsa-provenance.outputs.slsa-provenance-cache-key }}
          EXTRA_INPUT_APKO_REPOSITORY_APPEND: https://packages.wolfi.dev/os
          EXTRA_INPUT_APKO_KEYRING_APPEND: https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
        run: |
          # Do not append out repo/keyring/package to Alpine images.
          if grep 'alpinelinux\.org' "${{ matrix.apkoConfig }}" &>/dev/null; then
            unset EXTRA_INPUT_APKO_REPOSITORY_APPEND
            unset EXTRA_INPUT_APKO_KEYRING_APPEND
          fi

          # convert env vars beginning with "EXTRA_INPUT_"
          # to camelcased input variables passed to next step
          set -x
          echo '${{ toJSON(matrix) }}' > inputs.json
          for kv in `env | grep '^EXTRA_INPUT_' | sed 's/^EXTRA_INPUT_//'`; do
            k="$(echo "${kv}" | cut -d "=" -f1 | tr '[:upper:]' '[:lower:]' | sed -r 's/(.)_+(.)/\1\U\2/g;s/^[a-z]/\U&/' | sed 's/.*/\l&/')"
            v="$(echo "${kv}" | cut -d "=" -f2)"
            cat inputs.json | jq -c '. + {'${k}': "'${v}'"}' > inputs.json.tmp
            mv inputs.json.tmp inputs.json
          done
          echo "release-image-inputs=$(cat inputs.json | tr -d '\n')" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/release-image-terraform
        if: ${{ matrix.useTerraform }}
        with: ${{ fromJSON(steps.release-image-inputs.outputs.release-image-inputs) }}
      - uses: ./.github/actions/release-image
        if: ${{ ! matrix.useTerraform }}
        with: ${{ fromJSON(steps.release-image-inputs.outputs.release-image-inputs) }}
      - uses: ./.github/actions/policy-check-image
        with: ${{ fromJSON(steps.release-image-inputs.outputs.release-image-inputs) }}

  image-summary:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [generate-matrix, generate-slsa-provenance, build]
    if: always()
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix-unique-images) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - id: image-summary-inputs
        name: Add additional inputs for image-summary action
        env:
          EXTRA_INPUT_SLACK_WEBHOOK_URL: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          EXTRA_INPUT_GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER }}
          EXTRA_INPUT_GCS_AUTH_SERVICE_ACCOUNT: ${{ secrets.GCS_AUTH_SERVICE_ACCOUNT }}
          EXTRA_INPUT_GCS_AUTH_PROJECT_ID: ${{ secrets.GCS_AUTH_PROJECT_ID }}
          EXTRA_INPUT_GCS_BUCKET_NAME: chainguard-images-build-outputs
          # This allows chainguard-images/images to publish images to cgr.dev/chainguard
          # We maintain this identity here:
          # https://github.com/chainguard-dev/mono/blob/main/env/chainguard-images/iac/images-pusher.tf
          EXTRA_INPUT_CHAINGUARD_IDENTITY: 720909c9f5279097d847ad02a2f24ba8f59de36a/b6461e99e132298f
        run: |
          # convert env vars beginning with "EXTRA_INPUT_"
          # to camelcased input variables passed to next step
          set -x
          echo '${{ toJSON(matrix) }}' > inputs.json
          for kv in `env | grep '^EXTRA_INPUT_' | sed 's/^EXTRA_INPUT_//'`; do
            k="$(echo "${kv}" | cut -d "=" -f1 | tr '[:upper:]' '[:lower:]' | sed -r 's/(.)_+(.)/\1\U\2/g;s/^[a-z]/\U&/' | sed 's/.*/\l&/')"
            v="$(echo "${kv}" | cut -d "=" -f2)"
            cat inputs.json | jq -c '. + {'${k}': "'${v}'"}' > inputs.json.tmp
            mv inputs.json.tmp inputs.json
          done
          echo "image-summary-inputs=$(cat inputs.json | tr -d '\n')" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/image-summary
        with: ${{ fromJSON(steps.image-summary-inputs.outputs.image-summary-inputs) }}
