terraform {
  required_providers {
    oci = { source = "chainguard-dev/oci" }
  }
}

variable "digest" {
  description = "The image digest to run tests over."
}

data "oci_string" "ref" { input = var.digest }

// We rely on base image ("postgresql") tests and just just run the helm test here

resource "random_id" "hex" { byte_length = 4 }

resource "helm_release" "bitnami" {
  name       = "postgres-${random_id.hex.hex}"
  repository = "oci://registry-1.docker.io/bitnamicharts"
  chart      = "postgresql"

  namespace        = "postgres-${random_id.hex.hex}"
  create_namespace = true

  // Point the chart at our Postgres image
  set {
    name  = "image.registry"
    value = data.oci_string.ref.registry
  }
  set {
    name  = "image.repository"
    value = data.oci_string.ref.repo
  }
  set {
    name  = "image.digest"
    value = data.oci_string.ref.digest
  }

  set {
    name  = "primary.containerSecurityContext.runAsUser"
    value = "1001"
  }

  # https://artifacthub.io/packages/helm/bitnami/postgresql#securing-traffic-using-tls
  values = [
    jsonencode({
      volumePermissions = {
        enabled = true,
      },
      tls = {
        enabled       = true,
        autoGenerated = true,
      },
    }),
  ]
}

resource "kubernetes_job" "test_tls" {
  metadata {
    name      = "psqlc"
    namespace = helm_release.bitnami.namespace
  }
  spec {
    backoff_limit = 4
    template {
      metadata {
        labels = {
          app = "psqlc"
        }
      }
      spec {
        init_container {
          name    = "chown"
          image   = "cgr.dev/chainguard/busybox:latest"
          command = ["sh", "-c", "cp /tmp/certs/* /certs && chown -R 1001:1001 /certs && chmod 0600 /certs/*"]
          volume_mount {
            name       = "raw-certificates"
            mount_path = "/tmp/certs"
          }
          volume_mount {
            name       = "certs"
            mount_path = "/certs"
          }
          security_context {
            run_as_user = 0
          }
        }
        container {
          name  = "client"
          image = data.oci_string.ref.id
          security_context {
            allow_privilege_escalation = false
            capabilities {
              drop = ["ALL"]
            }
            privileged                = false
            read_only_root_filesystem = false
            run_as_non_root           = true
            run_as_user               = 1001
            seccomp_profile {
              type = "RuntimeDefault"
            }
          }
          command = [
            "psql",
            "host=${helm_release.bitnami.id}-postgresql.${helm_release.bitnami.id}.svc.cluster.local port=5432 sslmode=require sslcert=/certs/tls.crt sslkey=/certs/tls.key sslrootcert=/certs/ca.crt",
            "-c",
            "SELECT 1",
          ]
          env {
            name = "PGPASSWORD"
            value_from {
              secret_key_ref {
                name = "${helm_release.bitnami.id}-postgresql"
                key  = "postgres-password"
              }
            }
          }
          volume_mount {
            name       = "certs"
            mount_path = "/certs"
          }
          volume_mount {
            name       = "raw-certificates"
            mount_path = "/tmp/certs"
          }
        }
        volume {
          name = "raw-certificates"
          secret {
            default_mode = "0644"
            secret_name  = "${helm_release.bitnami.id}-postgresql-crt"
          }
        }
        volume {
          name = "certs"
          empty_dir {}
        }
        restart_policy = "Never"
      }
    }
  }

}

module "helm_cleanup_bitnami" {
  source    = "../../../tflib/helm-cleanup"
  name      = helm_release.bitnami.id
  namespace = helm_release.bitnami.namespace

  depends_on = [kubernetes_job.test_tls]
}
