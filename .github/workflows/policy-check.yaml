on:
  schedule:
    # 2 hours after release job
    - cron: '0 2 * * *'
  workflow_dispatch: {}
concurrency: policy-check
jobs:
  policy-check-generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      shard-0: ${{ steps.generate-matrix-0.outputs.matrix }}
      shard-1: ${{ steps.generate-matrix-1.outputs.matrix }}
    steps:
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
    - id: generate-matrix-0
      uses: ./.github/actions/generate-matrix
      with:
        shard: 0
        sharding-factor: 2
    - id: generate-matrix-1
      uses: ./.github/actions/generate-matrix
      with:
        shard: 1
        sharding-factor: 2

  policy-check-image-0:
    runs-on: ubuntu-latest
    needs: policy-check-generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.policy-check-generate-matrix.outputs.shard-0) }}
    permissions:
      actions: read
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - id: policy-check-image-inputs
        name: Add additional inputs for policy-check-image action
        env:
          EXTRA_INPUT_SLACK_WEBHOOK_URL: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          EXTRA_INPUT_APKO_IMAGE: ghcr.io/wolfi-dev/apko:latest@sha256:985e59098f9a6bd69d19e5d751ed7d23512b01d80a05be845b02722a0f47778d
        run: |
          # convert env vars beginning with "EXTRA_INPUT_"
          # to camelcased input variables passed to next step
          set -x
          echo '${{ toJSON(matrix) }}' > inputs.json
          for kv in `env | grep '^EXTRA_INPUT_' | sed 's/^EXTRA_INPUT_//'`; do
            k="$(echo "${kv}" | cut -d "=" -f1 | tr '[:upper:]' '[:lower:]' | sed -r 's/(.)_+(.)/\1\U\2/g;s/^[a-z]/\U&/' | sed 's/.*/\l&/')"
            v="$(echo "${kv}" | cut -d "=" -f2)"
            cat inputs.json | jq -c '. + {'${k}': "'${v}'"}' > inputs.json.tmp
            mv inputs.json.tmp inputs.json
          done
          echo "policy-check-image-inputs=$(cat inputs.json | tr -d '\n')" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/policy-check-image
        with: ${{ fromJSON(steps.policy-check-image-inputs.outputs.policy-check-image-inputs) }}

  policy-check-image-1:
    runs-on: ubuntu-latest
    needs: policy-check-generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.policy-check-generate-matrix.outputs.shard-1) }}
    permissions:
      actions: read
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - id: policy-check-image-inputs
        name: Add additional inputs for policy-check-image action
        env:
          EXTRA_INPUT_SLACK_WEBHOOK_URL: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          EXTRA_INPUT_APKO_IMAGE: ghcr.io/wolfi-dev/apko:latest@sha256:985e59098f9a6bd69d19e5d751ed7d23512b01d80a05be845b02722a0f47778d
        run: |
          # convert env vars beginning with "EXTRA_INPUT_"
          # to camelcased input variables passed to next step
          set -x
          echo '${{ toJSON(matrix) }}' > inputs.json
          for kv in `env | grep '^EXTRA_INPUT_' | sed 's/^EXTRA_INPUT_//'`; do
            k="$(echo "${kv}" | cut -d "=" -f1 | tr '[:upper:]' '[:lower:]' | sed -r 's/(.)_+(.)/\1\U\2/g;s/^[a-z]/\U&/' | sed 's/.*/\l&/')"
            v="$(echo "${kv}" | cut -d "=" -f2)"
            cat inputs.json | jq -c '. + {'${k}': "'${v}'"}' > inputs.json.tmp
            mv inputs.json.tmp inputs.json
          done
          echo "policy-check-image-inputs=$(cat inputs.json | tr -d '\n')" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/policy-check-image
        with: ${{ fromJSON(steps.policy-check-image-inputs.outputs.policy-check-image-inputs) }}
