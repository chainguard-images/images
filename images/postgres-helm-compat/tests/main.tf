terraform {
  required_providers {
    oci       = { source = "chainguard-dev/oci" }
    imagetest = { source = "chainguard-dev/imagetest" }
  }
}

variable "target_repository" {}

variable "digest" {
  description = "The image digest to run tests over."
}

locals { parsed = provider::oci::parse(var.digest) }

data "imagetest_inventory" "this" {}

module "cluster_harness" {
  source = "../../../tflib/imagetest/harnesses/k3s/"

  inventory         = data.imagetest_inventory.this
  name              = basename(path.module)
  target_repository = var.target_repository
  cwd               = path.module
}

// We rely on base image ("postgresql") tests and just just run the helm test here
module "helm" {
  source = "../../../tflib/imagetest/helm"

  chart = "oci://registry-1.docker.io/bitnamicharts/postgresql"

  values = {
    image = {
      registry   = local.parsed.registry
      repository = local.parsed.repo
      digest     = local.parsed.digest
    }
    primary = {
      containerSecurityContext = {
        runAsUser = 1001
      }
    }
    volumePermissions = {
      enabled = true
    }
    tls = {
      enabled       = true
      autoGenerated = true
    }
  }
}

resource "imagetest_feature" "basic" {
  name        = "basic"
  description = "Basic installation"
  harness     = module.cluster_harness.harness

  steps = [
    {
      name = "Helm Install"
      cmd  = module.helm.install_cmd
    },
    {
      name = "Test TLS"
      cmd  = <<EOF
        cat <<EOF2 | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: test-tls
            labels:
              test: test-tls
              app: psqlc
          spec:
            template:
              spec:
                initContainers:
                - name: chown
                  image: cgr.dev/chainguard/busybox:latest
                  workingDir: /workspace
                  command:
                  - sh
                  - -c
                  - 'cp /tmp/certs/* certs && chown -R 1001:1001 /certs && chmod 0600 /certs/*'
                  volumeMounts:
                  - name: raw-certificates
                    mountPath: /tmp/certs
                  - name: certs
                    mountPath: /certs
                  securityContext:
                    runAsUser: 0

                containers:
                - name: client
                  image: ${var.digest}
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop: ["ALL"]
                    privileged: false
                    readOnlyRootFilesystem: false
                    runAsNonRoot: true
                    runAsUser: 1001
                    seccompProfile:
                      type: RuntimeDefault
                  command:
                  - psql
                  - host=${module.helm.release_name}-postgresql.${module.helm.release_name}.svc.cluster.local port=5432 sslmode=require sslcert=/certs/tls.crt sslkeys=/certs/tls.key sslrootcert=/certs/ca.cert
                  - -c
                  - SELECT 1
                  env:
                  - name: PGPASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: ${module.helm.release_name}-postgresql
                        key: postgres-password
                  volumeMounts:
                  - name: raw-certificates
                    mountPath: /tmp/certs
                  - name: certs
                    mountPath: /certs

                volumes:
                - name: certs
                  emptyDir: {}
                - name: raw-certificates
                  secret:
                    defaultMode: 0644
                    secretName: ${module.helm.release_name}-postgresql-crt

                restartPolicy: Never
        EOF2
        kubectl wait --for=condition=complete --timeout=120s job/test-tls
      EOF
    }
  ]

  labels = {
    type = "k8s"
  }
}